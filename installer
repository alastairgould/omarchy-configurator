#!/bin/bash

# Requires that tte + tzupdate is already installed

abort() {
  echo "Aborted installation"
  exit 1
}

step() {
  clear
  tte -i logo.txt --frame-rate 240 ${2:-highlight}
  echo
  echo "$1" | tte --frame-rate 920 wipe
  echo
}

// STEP 1: NETWORK

step "Let's connect to network..."

if [[ "$1" != "dry" ]] && ip link show | grep -q 'state UP' && ping -c1 archlinux.org &>/dev/null; then
  echo -e "Ethernet connection detected and working.\n"
else
  echo "Detecting Wi-Fi networks..."
  wifi_interfaces=$(iw dev | awk '$1=="Interface" {print $2}')
  wifi_count=$(echo "$wifi_interfaces" | wc -l)

  if [[ $wifi_count -eq 1 ]]; then
    wifi_iface="$wifi_interfaces"
  else
    wifi_iface=$(echo "$wifi_interfaces" | gum choose --header "Select Wi-Fi interface")
  fi

  if [[ -z "$wifi_iface" ]]; then
    echo "No Wi-Fi interface selected. Exiting."
    exit 1
  fi

  # List available networks
  networks=$(nmcli -t -f SSID dev wifi list ifname "$wifi_iface" | grep -v '^$' | sort | uniq)
  ssid=$(echo "$networks" | gum choose --header "Select Wi-Fi network")

  if [[ -z "$ssid" ]]; then
    echo "No Wi-Fi network selected. Exiting."
    exit 1
  fi

  # Check if the network is open (no security)
  security=$(nmcli -t -f SSID,SECURITY dev wifi list ifname "$wifi_iface" | grep "^$ssid:" | cut -d: -f2)

  if [[ "$security" == "--" || -z "$security" ]]; then
    # Open network - connect without password
    nmcli dev wifi connect "$ssid" ifname "$wifi_iface"
  else
    # Secured network - ask for password
    wifi_pass=$(gum input --password --placeholder "Enter Wi-Fi password for $ssid")
    nmcli dev wifi connect "$ssid" password "$wifi_pass" ifname "$wifi_iface"
  fi

  if ! ping -c1 archlinux.org &>/dev/null; then
    echo "Wi-Fi connection failed. Exiting."
    exit 1
  fi

  echo -e "Wi-Fi connection established.\n"
fi

// STEP 2: USER

user_form() {
  step "Let's setup your machine..."

  while true; do
    user_name=$(gum input --placeholder "Alphanumeric without spaces (like dhh)" --prompt.foreground="#845DF9" --prompt "User name> ") || abort

    if [[ "$user_name" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]]; then
      break
    else
      gum spin -s "globe" --title "User name must be alphanumeric with no spaces" -- sleep 1
    fi
  done

  while true; do
    password=$(gum input --placeholder "Used for user + root + encryption" --prompt.foreground="#845DF9" --password --prompt "Password> ") || abort
    password_confirmation=$(gum input --placeholder "Must match the password you just typed" --prompt.foreground="#845DF9" --password --prompt "Confirm> ") || abort

    if [[ "$password" == "$password_confirmation" ]]; then
      break
    else
      gum spin -s "globe" --title "Passwords didn't match!" -- sleep 1
    fi
  done

  full_name=$(gum input --placeholder "Used for git authentication (hit return to skip)" --prompt.foreground="#845DF9" --prompt "Full name> ")
  email_address=$(gum input --placeholder "Used for git authentication (hit return to skip)" --prompt.foreground="#845DF9" --prompt "Email address> ")

  while true; do
    hostname=$(gum input --placeholder "Alphanumeric without spaces (or return for 'omarchy')" --prompt.foreground="#845DF9" --prompt "Hostname> ")

    if [[ "$hostname" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]]; then
      break
    else
      hostname="omarchy"
      break
    fi
  done

  timezone=$(timedatectl list-timezones | gum choose --height 1 --selected=$(tzupdate -p) --header "Timezone") || abort
  locale=$(sed 's/ .*//' /usr/share/i18n/SUPPORTED | gum choose --height 1 --selected=en_US.UTF-8 --header "Locale") || abort
}

user_form

while true; do
  echo -e "Field,Value\nUser name,$user_name\nPassword,$(printf "%${#password}s" | tr ' ' '*')\nFull name,${full_name:-[Skipped]}\nEmail address,${email_address:-[Skipped]}\nHostname,$hostname\nTimezone,$timezone\nLocale,$locale" | gum table -s "," -p

  echo
  if gum confirm --negative "No, change it" "Does this look right?"; then
    break
  else
    user_form
  fi
done

// STEP 3: DISK

disk_form() {
  step "Let's select where to install Omarchy..." slide

  disk=$(lsblk -dpno NAME,SIZE,TYPE | grep -E '/dev/(sd|hd|vd|nvme|mmcblk)' | awk '{print $1, $2}' | gum choose --header "Select install disk") || abort
  disk=$(echo "$disk" | awk '{print $1}')
}

disk_form

while true; do
  echo -e "Everything will be overwritten. There is no recovery possible."

  echo
  if gum confirm --affirmative "Yes, format disk" --negative "No, change it" "Confirm overwriting ${disk}"; then
    break
  else
    disk_form
  fi
done

cat <<EOJ
{
  "user_name": "$user_name",
  "password": "$password",
  "full_name": "$full_name",
  "email_address": "$email_address",
  "timezone": "$timezone",
  "locale": "$locale",
  "disk": "$disk"
}
EOJ
