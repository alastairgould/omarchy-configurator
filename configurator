#!/bin/bash

OMARCHY_LOGO='                 ▄▄▄                                                   
 ▄█████▄    ▄███████████▄    ▄███████   ▄███████   ▄███████   ▄█   █▄    ▄█   █▄ 
███   ███  ███   ███   ███  ███   ███  ███   ███  ███   ███  ███   ███  ███   ███
███   ███  ███   ███   ███  ███   ███  ███   ███  ███   █▀   ███   ███  ███   ███
███   ███  ███   ███   ███ ▄███▄▄▄███ ▄███▄▄▄██▀  ███       ▄███▄▄▄███▄ ███▄▄▄███
███   ███  ███   ███   ███ ▀███▀▀▀███ ▀███▀▀▀▀    ███      ▀▀███▀▀▀███  ▀▀▀▀▀▀███
███   ███  ███   ███   ███  ███   ███ ██████████  ███   █▄   ███   ███  ▄██   ███
███   ███  ███   ███   ███  ███   ███  ███   ███  ███   ███  ███   ███  ███   ███
 ▀█████▀    ▀█   ███   █▀   ███   █▀   ███   ███  ███████▀   ███   █▀    ▀█████▀ 
                                       ███   █▀                                  '

# Install prerequisites
if ! command -v gum >/dev/null || ! command -v iwctl >/dev/null; then
  sudo pacman -Sy --noconfirm --needed gum iw
fi

abort() {
  echo "${1:-Aborted installation}"
  exit 1
}

working_network() {
  sleep 2
  ping -c3 1.1.1.1 &>/dev/null
}

clear_logo() {
  clear
  echo -e "$OMARCHY_LOGO\n"
  echo
}

step() {
  clear_logo
  echo "$1"
  echo
}

notice() {
  clear_logo
  gum spin --spinner "globe" --title "$1" -- sleep "${2:-2}"
}

# STEP 1: NETWORK (OPTIONAL WHEN RUNNING OFFLINE INSTALLATION)

if [[ -n $NETWORK_NEEDED || -n $WIFI_NEEDED ]]; then
  step "Detecting network..."

  if [[ -n $WIFI_NEEDED ]] || ! working_network; then
    wifi_interfaces=$(iw dev | awk '$1=="Interface"{print $2}')
    wifi_count=$(echo "$wifi_interfaces" | wc -l)

    if [[ $wifi_count -eq 0 ]]; then
      abort "No Wi-Fi interfaces found."
    elif [[ $wifi_count -eq 1 ]]; then
      wifi_interface="$wifi_interfaces"
    else
      clear_logo
      wifi_interface=$(echo "$wifi_interfaces" | gum choose --header "Select Wi-Fi interface") || abort
    fi

    while true; do
      step "Scanning Wi-Fi..."
      networks=$(sudo iw dev "$wifi_interface" scan | sed -n 's/^[[:space:]]*SSID: //p' | sed '/^$/d' | sort -u)

      clear_logo
      ssid="$(echo "$networks" | gum choose --header "Select Wi-Fi network")" || abort

      step "Connecting to $ssid..."
      if iwctl station "$wifi_interface" connect "$ssid" && working_network; then
        break
      else
        notice "Couldn't connect to network (bad password?)" 1
      fi
    done
  fi
fi

# STEP 2: USER

user_form() {
  step "Let's setup your machine..."

  while true; do
    user_name=$(gum input --placeholder "Alphanumeric without spaces (like dhh)" --prompt.foreground="#845DF9" --prompt "User name> ") || abort

    if [[ "$user_name" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]]; then
      break
    else
      notice "User name must be alphanumeric with no spaces" 1
    fi
  done

  while true; do
    password=$(gum input --placeholder "Used for user + root + encryption" --prompt.foreground="#845DF9" --password --prompt "Password> ") || abort
    password_confirmation=$(gum input --placeholder "Must match the password you just typed" --prompt.foreground="#845DF9" --password --prompt "Confirm> ") || abort

    if [[ "$password" == "$password_confirmation" ]]; then
      break
    else
      notice "Passwords didn't match!" 1
    fi
  done

  # Hash the password using yescrypt
  password_hash=$(openssl passwd -6 "$password")

  full_name=$(gum input --placeholder "Used for git authentication (hit return to skip)" --prompt.foreground="#845DF9" --prompt "Full name> ")
  email_address=$(gum input --placeholder "Used for git authentication (hit return to skip)" --prompt.foreground="#845DF9" --prompt "Email address> ")

  while true; do
    hostname=$(gum input --placeholder "Alphanumeric without spaces (or return for 'omarchy')" --prompt.foreground="#845DF9" --prompt "Hostname> ")

    if [[ "$hostname" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]]; then
      break
    else
      hostname="omarchy"
      break
    fi
  done

  timezone=$(timedatectl list-timezones | gum filter --height 10 --header "Timezone") || abort
  locale=$(sed '/[.@]/d; s/ .*//' /usr/share/i18n/SUPPORTED | gum choose --height 1 --selected=en_US --header "Locale/keyboard") || abort

  # Set keyboard from locale
  case "$locale" in
  en_US) keyboard="us" ;;
  en_GB) keyboard="gb" ;;
  da_*) keyboard="dk" ;;
  pt_BR) keyboard="br" ;;
  sv_*) keyboard="se" ;;
  no_*) keyboard="no" ;;
  *) keyboard=$(printf '%s' "${locale%%_*}" | tr '[:upper:]' '[:lower:]') ;;
  esac
}

user_form

while true; do
  echo -e "Field,Value\nUser name,$user_name\nPassword,$(printf "%${#password}s" | tr ' ' '*')\nFull name,${full_name:-[Skipped]}\nEmail address,${email_address:-[Skipped]}\nHostname,$hostname\nTimezone,$timezone\nLocale,$locale" | gum table -s "," -p

  echo
  if gum confirm --negative "No, change it" "Does this look right?"; then
    break
  else
    user_form
  fi
done

# STEP 3: DISK

disk_form() {
  step "Let's select where to install Omarchy..." slide

  disk=$(lsblk -dpno NAME,SIZE,TYPE | grep -E '/dev/(sd|hd|vd|nvme|mmcblk)' | awk '{print $1, $2}' | gum choose --header "Select install disk") || abort
  disk=$(echo "$disk" | awk '{print $1}')

  disk_size=$(lsblk -bdno SIZE "$disk")
  # 2GiB boot + 1MiB Start Offset + 1MiB reserve for GPT backup
  main_partition_size=$((disk_size - 2148532224 - 1048576))
}

disk_form

while true; do
  echo -e "Everything will be overwritten. There is no recovery possible."

  echo
  if gum confirm --affirmative "Yes, format disk" --negative "No, change it" "Confirm overwriting ${disk}"; then
    break
  else
    disk_form
  fi
done

clear

echo "$full_name" >user_full_name.txt
echo "$email_address" >user_email_address.txt

if [[ -d /sys/firmware/efi/efivars ]]; then
  bootloader="systemd-boot"
else
  bootloader="grub"
fi

cat <<-_EOF_ | tee user_credentials.json >/dev/null
{
    "encryption_password": "$password",
    "root_enc_password": "$password_hash",
    "users": [
        {
            "enc_password": "$password_hash",
            "groups": [],
            "sudo": true,
            "username": "$user_name"
        }
    ]
}
_EOF_

cat <<-_EOF_ | tee user_configuration.json >/dev/null
{
    "app_config": null,
    "archinstall-language": "English",
    "auth_config": {},
    "audio_config": {
        "audio": "pipewire"
    },
    "bootloader": "$bootloader",
    "custom_commands": [],
    "disk_config": {
        "btrfs_options": {
            "snapshot_config": null
        },
        "config_type": "default_layout",
        "device_modifications": [
            {
                "device": "$disk",
                "partitions": [
                    {
                        "btrfs": [],
                        "dev_path": null,
                        "flags": [
                            "boot",
                            "esp"
                        ],
                        "fs_type": "fat32",
                        "mount_options": [],
                        "mountpoint": "/boot",
                        "obj_id": "ea21d3f2-82bb-49cc-ab5d-6f81ae94e18d",
                        "size": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "GiB",
                            "value": 2
                        },
                        "start": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "MiB",
                            "value": 1
                        },
                        "status": "create",
                        "type": "primary"
                    },
                    {
                        "btrfs": [
                            {
                                "mountpoint": "/",
                                "name": "@"
                            },
                            {
                                "mountpoint": "/home",
                                "name": "@home"
                            },
                            {
                                "mountpoint": "/var/log",
                                "name": "@log"
                            },
                            {
                                "mountpoint": "/var/cache/pacman/pkg",
                                "name": "@pkg"
                            }
                        ],
                        "dev_path": null,
                        "flags": [],
                        "fs_type": "btrfs",
                        "mount_options": [
                            "compress=zstd"
                        ],
                        "mountpoint": null,
                        "obj_id": "8c2c2b92-1070-455d-b76a-56263bab24aa",
                        "size": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "B",
                            "value": ${main_partition_size}
                        },
                        "start": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "B",
                            "value": 2148532224
                        },
                        "status": "create",
                        "type": "primary"
                    }
                ],
                "wipe": true
            }
        ],
        "disk_encryption": {
            "encryption_type": "luks",
            "lvm_volumes": [],
            "partitions": [
                "8c2c2b92-1070-455d-b76a-56263bab24aa"
            ],
            "encryption_password": "$password"
        }
    },
    "hostname": "$hostname",
    "kernels": [
        "linux"
    ],
    "locale_config": {
        "kb_layout": "$keyboard",
        "sys_enc": "UTF-8",
        "sys_lang": "en_US.UTF-8"
    },
    "mirror_config": {
        "custom_repositories": [],
        "custom_servers": [{"url": "https://geo.mirror.pkgbuild.com/\$repo/os/\$arch"}],
        "mirror_regions": {},
        "optional_repositories": []
    },
    "network_config": {
        "type": "iso"
    },
    "ntp": true,
    "packages": [
        "gum",
        "wget",
        "base-devel"
    ],
    "parallel_downloads": 8,
    "profile_config": {
        "gfx_driver": null,
        "greeter": null,
        "profile": {}
    },
    "script": null,
    "services": [],
    "swap": true,
    "timezone": "$timezone",
    "version": "3.0.9"
}
_EOF_
